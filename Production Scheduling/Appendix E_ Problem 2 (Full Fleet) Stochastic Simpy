{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Appendix E: Problem 2 (Full Fleet) Stochastic Simpy","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"sIwX36L5tMZr"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import simpy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEQmT5RT-eZX","executionInfo":{"status":"ok","timestamp":1621270258905,"user_tz":240,"elapsed":5838,"user":{"displayName":"Nicolas Whittle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgQk4yLXZTj1xPsP1z5YwfX1vrOxnqfFQUmPrUT=s64","userId":"08948921273548144291"}},"outputId":"25b0c031-485a-4f9b-d37e-7bca20a2e95b"},"source":["pip install simpy"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting simpy\n","  Downloading https://files.pythonhosted.org/packages/20/f9/874b0bab83406827db93292a5bbe5acb5c18e3cea665b2f6e053292cb687/simpy-4.0.1-py2.py3-none-any.whl\n","Installing collected packages: simpy\n","Successfully installed simpy-4.0.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CTCx6OcL3Ik2"},"source":["Make sure Simpy is installed on your machine."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"SVzCVTBpuMS6","executionInfo":{"status":"ok","timestamp":1621270300177,"user_tz":240,"elapsed":2748,"user":{"displayName":"Nicolas Whittle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgQk4yLXZTj1xPsP1z5YwfX1vrOxnqfFQUmPrUT=s64","userId":"08948921273548144291"}},"outputId":"cf847e4b-cd25-4c74-d1cf-22ab597a0fed"},"source":["data = []\n","\n","def crane(env,trucks, data):\n","  for i in range(275):         #How many jobs\n","    job = []                                 #data\n","    #print()\n","    #print(\"CRANE READY\", env.now )\n","    job.append(env.now)                      #data\n","    req =  trucks.request()                  #create request for truck\n","    time1 = env.now\n","    yield req                                 #ask for truck. If no truck is avaible, code will wait here until a truck is available\n","    wait = env.now - time1\n","    job.append(wait)\n","    env.process(truck(env, req, job))              #Now that i have a truck, take it and do truck stuff with the truck function\n","    #print(\"CRANE PUTTING CONTAINER ON TRUCK\", env.now)\n","    job.append(env.now)\n","    data.append(job)\n","    crane_rate = np.random.normal(3.75,0.3)\n","    yield env.timeout(crane_rate)           #crane rate, wait for creane to get ready\n","    \n","\n","\n","def truck(env, req, job):\n","  #print(\"truck started at\", env.now)       #Truck has just received container and is starting\n","  yield env.timeout(np.random.normal(12,1))                   #process truck\n","  trucks.release(req)                      #Truck has finished. Released so truck is available again\n","  job.append(env.now)\n","  #print(\"FINSHED A JOB AT\", env.now)\n","  #print()\n","\n","\n","\n","env = simpy.Environment()\n","trucks = simpy.Resource(env, capacity=4)    #Create a truck resource. We can change how many trucks\n","\n","env.process(crane(env, trucks, data))      # creates a crane process. If we want more cranes we creatae more processes\n","env.run()\n","x = pd.DataFrame(data, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","x.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Crane Ready</th>\n","      <th>Wait</th>\n","      <th>Putting on Truck</th>\n","      <th>Finish</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>270</th>\n","      <td>1014.444960</td>\n","      <td>0.0</td>\n","      <td>1014.444960</td>\n","      <td>1026.204013</td>\n","    </tr>\n","    <tr>\n","      <th>271</th>\n","      <td>1017.738575</td>\n","      <td>0.0</td>\n","      <td>1017.738575</td>\n","      <td>1030.395190</td>\n","    </tr>\n","    <tr>\n","      <th>272</th>\n","      <td>1021.183055</td>\n","      <td>0.0</td>\n","      <td>1021.183055</td>\n","      <td>1032.030854</td>\n","    </tr>\n","    <tr>\n","      <th>273</th>\n","      <td>1025.139296</td>\n","      <td>0.0</td>\n","      <td>1025.139296</td>\n","      <td>1037.718968</td>\n","    </tr>\n","    <tr>\n","      <th>274</th>\n","      <td>1028.715965</td>\n","      <td>0.0</td>\n","      <td>1028.715965</td>\n","      <td>1041.506684</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Crane Ready  Wait  Putting on Truck       Finish\n","270  1014.444960   0.0       1014.444960  1026.204013\n","271  1017.738575   0.0       1017.738575  1030.395190\n","272  1021.183055   0.0       1021.183055  1032.030854\n","273  1025.139296   0.0       1025.139296  1037.718968\n","274  1028.715965   0.0       1028.715965  1041.506684"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":368},"id":"Xb1qWLtuiWHT","executionInfo":{"status":"error","timestamp":1621270242985,"user_tz":240,"elapsed":1901,"user":{"displayName":"Nicolas Whittle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgQk4yLXZTj1xPsP1z5YwfX1vrOxnqfFQUmPrUT=s64","userId":"08948921273548144291"}},"outputId":"6db51caa-6d8d-4f82-b877-b174cc093402"},"source":["#24 pool\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import simpy\n","\n","def sim(number_trucks,containers,truck_process,crane_rate ):\n","  data1 = []\n","  data2 = []\n","  data3 = []\n","  data4 = []\n","  data5 = []\n","  data6 = []\n","\n","  def crane(env,trucks, data, containers,truck_process, crane_rate):\n","    for i in range(containers):         #How many jobs\n","      job = []                                 #data\n","      #print()\n","      #print(\"CRANE READY\", env.now)\n","      job.append(env.now)                      #data\n","      req =  trucks.request()                  #create request for truck\n","      time1 = env.now\n","      yield req                                 #ask for truck. If no truck is avaible, code will wait here until a truck is available\n","      wait = env.now - time1\n","      job.append(wait)\n","      env.process(truck(env, req, job, truck_process))              #Now that i have a truck, take it and do truck stuff with the truck function\n","      #print(\"CRANE PUTTING CONTAINER ON TRUCK\", env.now)\n","      job.append(env.now)\n","      data.append(job)\n","      rand_crane_rate = np.random.normal(crane_rate,0.3)\n","      yield env.timeout(rand_crane_rate)           #crane rate, wait for creane to get ready\n","      \n","\n","\n","  def truck(env, req, job, truck_process):\n","    #print(\"truck started at\", env.now)       #Truck has just received container and is starting\n","    yield env.timeout(np.random.normal(truck_process,1))                   #process truck\n","    trucks.release(req)                      #Truck has finished. Released so truck is available again\n","    job.append(env.now)\n","    #print(\"FINSHED A JOB AT\", env.now)\n","    #print()\n","\n","\n","\n","  env = simpy.Environment()\n","  trucks = simpy.Resource(env, capacity=number_trucks)    #Create a truck resource. We can change how many trucks\n","\n","  env.process(crane(env, trucks, data1,  containers,truck_process, crane_rate))      # creates a crane process. If we want more cranes we creata more processes\n","  env.process(crane(env, trucks, data2,  containers,truck_process, crane_rate))\n","  env.process(crane(env, trucks, data3,  containers,truck_process, crane_rate))\n","  env.process(crane(env, trucks, data4,  containers,truck_process, crane_rate))\n","  env.process(crane(env, trucks, data5,  containers,truck_process, crane_rate))\n","  env.process(crane(env, trucks, data6,  containers,truck_process, crane_rate))\n","\n","  env.run()\n","\n","  x = pd.DataFrame(data1, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","  y = pd.DataFrame(data2, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","  z = pd.DataFrame(data3, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","  a = pd.DataFrame(data4, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","  b = pd.DataFrame(data5, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","  c = pd.DataFrame(data6, columns =[\"Crane Ready\", \"Wait\", \"Putting on Truck\", \"Finish\"])\n","  return (x,y,z,a,b,c)\n","\n","\n","print(\"Number of trucks in fleet:\")\n","trucks = input()\n","print(\"Number of containers per crane:\")\n","containers = input()\n","print(\"Average truck travel time:\")\n","truck_process = input()\n","print(\"Crane rate:\")\n","crane_rate = input()\n","\n","\n","\n","def data_proccessing(trucks, containers, truck_process, crane_rate):\n","  cumwait = []\n","  cumcmax = []\n","  for _ in range(100):\n","    x,y,z,a,b,c = sim(int(trucks), int(containers), float(truck_process), float(crane_rate))\n","\n","    total_wait = sum((sum(x[\"Wait\"]),sum(y[\"Wait\"]),sum(z[\"Wait\"]),sum(a[\"Wait\"]),sum(b[\"Wait\"]),sum(c[\"Wait\"])))\n","    cumwait.append(total_wait)\n","    cmax = max(x[\"Finish\"][274],y[\"Finish\"][274],z[\"Finish\"][274],a[\"Finish\"][274],b[\"Finish\"][274],c[\"Finish\"][274])\n","    cumcmax.append(cmax)\n","  print(\"Wait Time\", np.mean(cumwait))\n","  print(\"Cmax\", np.mean(cumcmax))\n","  print()\n","\n","data_proccessing(trucks, containers, truck_process, crane_rate)\n","\n","# for cap in range(15,26):\n","#   cumwait = []\n","#   cumcmax = []\n","#   for _ in range(100):\n","#     x,y,z,a,b,c = sim(int(trucks), int(containers), float(truck_process), float(crane_rate))\n","\n","#     total_wait = sum((sum(x[\"Wait\"]),sum(y[\"Wait\"]),sum(z[\"Wait\"]),sum(a[\"Wait\"]),sum(b[\"Wait\"]),sum(c[\"Wait\"])))\n","#     cumwait.append(total_wait)\n","#     cmax = max(x[\"Finish\"][274],y[\"Finish\"][274],z[\"Finish\"][274],a[\"Finish\"][274],b[\"Finish\"][274],c[\"Finish\"][274])\n","#     cumcmax.append(cmax)\n","#   print(\"Wait Time\", np.mean(cumwait))\n","#   print(\"Cmax\", np.mean(cumcmax))\n","#   print()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-a2e01e11afef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0msimpy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumber_trucks\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcontainers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtruck_process\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcrane_rate\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'simpy'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]}]}